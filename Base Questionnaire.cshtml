@using DotNetNuke.Common;
@using System;
@using DotNetNuke.Entities.Modules;
@using System.Data.SqlClient;
@using System.Diagnostics;
@using System.Data;
@using System.Data.Common;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using System.Net.Mail;
@using System.Net;


@*Copyright (c) 2017 by Anubis *@

<body>
<form method="POST" action="">

@{
  int readiness = 0;
  int total_questions = 0;

  List<string> questions = new List<string>();

  string body = "";
  string subject = "";
  string contact = "";
  string readiness_level = "";

  var displayName = DotNetNuke.Entities.Users.UserController.GetCurrentUserInfo().DisplayName.ToString();
  var userEmail = DotNetNuke.Entities.Users.UserController.GetCurrentUserInfo().Email.ToString();

  var ConnectionString = DotNetNuke.Common.Utilities.Config.GetConnectionString();

  var database = new SqlConnection(ConnectionString);
  var selectQueryString = "SELECT * FROM Questions ORDER BY Question_ID";

  SqlCommand command = new SqlCommand(selectQueryString, database);
  database.Open();
  var databaseName = database.Database;
  SqlDataReader reader = command.ExecuteReader();


  try
  {
    while (reader.Read())
    {
      // increment the total number of questions in the questionnaire
      total_questions = total_questions + 1;

      if (reader[3] != DBNull.Value){
            <h3>@reader[1] <span style="color: red">*</span></h3>
          }else{<h3>@reader[1]</h3>}


      if (DBNull.Value != reader[5]){
        <button type="button" class="btn btn-info" data-toggle="modal" data-target="#@reader[0]">More Information</button><br></br>

        <div id="@reader[0]" class="modal fade" role="dialog">
          <div class="modal-dialog">

            <div class="modal-content">
              <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">@reader[4]</h4>
              </div>
              <div class="modal-body">
                <p>@reader[5]</p>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
              </div>
            </div>

          </div>
        </div>

      }

      // 14-21 readiness VALUES, 14->option 1 (reader 6)

       // Populating question options
       if (DBNull.Value != reader[6])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[6]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[6]</label><br></br>
        }
        if (DBNull.Value != reader[7])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[7]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[7]</label><br></br>
        }
        if (DBNull.Value != reader[8])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[8]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[8]</label><br></br>
        }
        if (DBNull.Value != reader[9])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[9]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[9]</label><br></br>
        }
        if (DBNull.Value != reader[10])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[10]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[10]</label><br></br>
        }
        if (DBNull.Value != reader[11])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[11]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[11]</label><br></br>
        }
        if (DBNull.Value != reader[12])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[12]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[12]</label><br></br>
        }
        if (DBNull.Value != reader[13])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[13]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[13]</label><br></br>
        }
    }
  }
    finally
    {
      // Always call Close when done reading.
      reader.Close();
      <h3>Would you like to send your readiness information to the local Shelters?</h3>
      <label style="font-size:medium"><input style="height:20px;width:20px" type="checkbox" name="contact" value="Yes" > Yes</label><br></br>
      <input type="submit" class="btn btn-success btn-lg" name="submit" value="Submit" />
      <input type="reset" class="btn btn-danger btn-lg" name="reset" value="Restart" />

    }
    if (IsPost)
    {

      try
      {

        int readiness_Value_Perfect = 0;
        int readiness_Value_Great = 0;
        int readiness_Value_Good = 0;
        int readiness_Value_Okay = 0;
        int readiness_Value_Neutral = 0;
        int readiness_Value_Flag = 0;
        int readiness_Value_Yellow_Flag = 0;
        int readiness_Value_Red_Flag = 0;
        int readiness_Value_Restrict = 0;

        var readinessQueryString = "SELECT * FROM readiness_Value";

        SqlCommand cmd = new SqlCommand(readinessQueryString, database);
        SqlDataReader readerReadiness = cmd.ExecuteReader();

        try
        {
          while(readerReadiness.Read())
          {
            readiness_Value_Perfect = readerReadiness.GetInt32(1);
            readiness_Value_Great = readerReadiness.GetInt32(2);
            readiness_Value_Good = readerReadiness.GetInt32(3);
            readiness_Value_Okay = readerReadiness.GetInt32(4);
            readiness_Value_Neutral = readerReadiness.GetInt32(5);
            readiness_Value_Flag = readerReadiness.GetInt32(6);
            readiness_Value_Yellow_Flag = readerReadiness.GetInt32(7);
            readiness_Value_Red_Flag = readerReadiness.GetInt32(8);
            readiness_Value_Restrict = readerReadiness.GetInt32(9);
          }
        }
        catch
        {

        }
        finally
        {
          readerReadiness.Close();
          <p>@readiness_Value_Perfect
          @readiness_Value_Great
          @readiness_Value_Good
          @readiness_Value_Okay
          @readiness_Value_Neutral
          @readiness_Value_Flag
          @readiness_Value_Yellow_Flag
          @readiness_Value_Red_Flag
          @readiness_Value_Restrict</p>
        }

        // Add the question responses to the questions list
        for (int i = 1; i <= total_questions; i++) {
          questions.Insert(i, Request.Form["question_" + i.ToString()]);
        }

        contact = Request.Form["contact"];

        string[] questions_array = questions.ToArray<string>();

          if (questions_array[3].Equals("Yes"))
          {
            readiness += readiness_Value_Good;
          }

          if(questions_array[4].Equals("No"))
          {
            readiness += readiness_Value_Good;
          }

          if(questions_array[5].Equals("No"))
          {
            readiness += readiness_Value_Good;
          }
          if(questions_array[5].Equals("Yes"))
          {
            readiness += readiness_Value_Flag;
          }

          if(questions_array[6].Equals("No"))
          {
            readiness += readiness_Value_Good;
          }
          if(questions_array[6].Equals("Yes"))
          {
            readiness += readiness_Value_Red_Flag;
          }

          if(questions_array[6].Equals("Yes, full time"))
          {
            readiness += readiness_Value_Great;
          }
          if(questions_array[7].Equals("Yes, part time"))
          {
            readiness += readiness_Value_Good;
          }
          if(questions_array[7].Equals("Yes, seasonal or temporary"))
          {
            readiness += readiness_Value_Good;
          }
          if(questions_array[7].Equals("Maybe"))
          {
            readiness += readiness_Value_Okay;
          }

          if(questions_array[9].Equals("Yes"))
          {
            readiness += readiness_Value_Good;
          }
          if(questions_array[9].Equals("No"))
          {
            readiness += readiness_Value_Flag;
          }

          if(questions_array[10].Equals("$1250/year") || questions_array[10].Equals("$1000/year") || questions_array[10].Equals("$750/year"))
          {
            readiness += readiness_Value_Good;
          }
          if(questions_array[10].Equals("$250/year") || questions_array[10].Equals("$500/year"))
          {
            readiness += readiness_Value_Okay;
          }

          if(questions_array[11].Equals("$1250/year") || questions_array[11].Equals("$1000/year") || questions_array[11].Equals("$1750+/year") || questions_array[11].Equals("$1500/year"))
          {
            readiness += readiness_Value_Good;
          }
          if(questions_array[11].Equals("$250/year") || questions_array[11].Equals("$500/year") || questions_array[11].Equals("$750/year"))
          {
            readiness += readiness_Value_Flag;
          }

          if(questions_array[14].Equals("Apartment (2+ bedrooms)") || questions_array[14].Equals("Apartment (studio/ single room)") || questions_array[14].Equals("Condo") || questions_array[14].Equals("Single family home"))
          {
            readiness += readiness_Value_Good;
          }
          if(questions_array[14].Equals("Dorm/Resident hall"))
          {
            readiness += readiness_Value_Restrict;
          }

          if(questions_array[21].Equals("Yes"))
          {
            readiness += readiness_Value_Flag;
          }
          if(questions_array[21].Equals("No"))
          {
            readiness += readiness_Value_Good;
          }

          if(questions_array[22].Equals("Yes"))
          {
            readiness += readiness_Value_Flag;
          }
          if(questions_array[22].Equals("No"))
          {
            readiness += readiness_Value_Good;
          }

        SqlDataReader reader2;
        var insertQueryString = "INSERT INTO Responses (User_ID,Readiness) VALUES (@1,@2)";
        SqlCommand comm = new SqlCommand();
        comm.Connection = database;
        comm.CommandType = CommandType.Text;
        comm.CommandText = insertQueryString;
        comm.Parameters.AddWithValue("@1", DotNetNuke.Entities.Users.UserController.GetCurrentUserInfo().UserID.ToString());
        comm.Parameters.AddWithValue("@2", readiness);

        reader2 = comm.ExecuteReader();

        reader2.Close();

        if(readiness >= 13){
          readiness_level = "They are PetReady!";
        }
        if(readiness < 13){
          readiness_level = "Sadly they are not PetReady.";
        }

        SqlCommand Sheltercmd = new SqlCommand();

        SqlDataReader Shelterreader;

        Sheltercmd.CommandText = "Select partnered_Shelter_Email FROM partnered_Shelter";

        Sheltercmd.CommandType = CommandType.Text;

        Sheltercmd.Connection = database;

        Shelterreader = Sheltercmd.ExecuteReader();

        string stringTo = "";

        subject = "PetReady Questionnaire Report for " + displayName;
        body = "PetReady Questionnaire Report for " + displayName + "\n" +
        "\nReply To: " + userEmail + "\n" +
        "\nReadiness Level: " + readiness_level + "\n" +
        "\nGender: " + questions_array[1] + "\n" +
        "\nWhich of the following fit your life situation: " + questions_array[2] + "\n" +
        "\nDo you or anyone that lives with you have allergies to dogs: " + questions_array[3] + "\n" +
        "\nDo you or anyone that lives with you have allergies to cats: " + questions_array[4] + "\n" +
        "\nAre you planning on moving in the next 12 months: " + questions_array[5] + "\n" +
        "\nAre you planning on leaving the country in the next 24 months for an extended period of time: " + questions_array[6] + "\n" +
        "\nAre you employed: " + questions_array[7] + "\n" +
        "\nIf employed, what is your typical shift type: " + questions_array[8] + "\n" +
        "\nDo you have a budget in mind for your new pet: " + questions_array[9] + "\n" +
        "\nWhat is your yearly pet budget: " + questions_array[10] + "\n" +
        "\nWhat is your emergency budget: " + questions_array[11] + "\n" +
        "\nWhat lifestyle fits you best: " + questions_array[12] + "\n" +
        "\nHow much free time do you have in a given day: " + questions_array[13] + "\n" +
        "\nWhat type of home do you live in: " + questions_array[14] + "\n" +
        "\nIs there a pet deposit where you live: " + questions_array[15] + "\n" +
        "\nIs there a monthly pet fee where you live: " + questions_array[16] + "\n" +
        "\nAre there any restrictions on breed, size, weight, or type where you live: " + questions_array[17] + "\n" +
        "\nDo you have a yard or access to a dog park: " + questions_array[18] + "\n" +
        "\nHave you ever owned a pet before: " + questions_array[19] + "\n" +
        "\nHave you kept your current/previous pets up to date with vaccinations: " + questions_array[20] + "\n" +
        "\nHave you ever surrendered a pet before: " + questions_array[21] + "\n" +
        "\nDo you plan to have cosmetically(voluntary) altering surgery performed on your new pet(s)? " + questions_array[22];

        try
        {
          while(Shelterreader.Read())
          {
            stringTo += Shelterreader[0] + " ,";
          }
            stringTo = stringTo.TrimEnd(stringTo[stringTo.Length -1]);
        }
        catch
        {

        }
        finally
        {
          Shelterreader.Close();
          database.Close();
          if(contact.Equals("Yes"))
          {
            DotNetNuke.Services.Mail.Mail.SendEmail("petready.webmaster@gmail.com", stringTo, subject, body);
          }

        }

      }
      catch
      {

      }

      finally
      {
         Response.Redirect("http://petready.org.nau.edu/Find-A-Pet");
      }
    }
}

</form>
</body>

<script>
$('form').on('reset', function() {
  console.log("reset");
  return confirm("Are you sure you want to reset all questions");
});
</script>
