@using DotNetNuke.Common;
@using System;
@using DotNetNuke.Entities.Modules;
@using System.Data.SqlClient;
@using System.Diagnostics;
@using System.Data;
@using System.Data.Common;
@using System.Collections.Generic;
@using System.Linq;
@using System.Text;
@using System.Net.Mail;
@using System.Net;


@*Copyright (c) 2017 by Anubis *@

<body>
<form method="POST" action="">

@{
  int readiness = 0;
  string question_1 = "";
  string question_2 = "";
  string question_3 = "";
  string question_4 = "";
  string question_5 = "";
  string question_6 = "";
  string question_7 = "";
  string question_8 = "";
  string question_9 = "";
  string question_10 = "";
  string question_11 = "";
  string question_12 = "";
  string question_13 = "";
  string question_14 = "";
  string question_15 = "";
  string question_16 = "";
  string question_17 = "";
  string question_18 = "";
  string question_19 = "";
  string question_20 = "";
  string question_21 = "";
  string question_22 = "";
  string body = "";
  string subject = "";
  string contact = "";
  string readiness_level = "";

  var displayName = DotNetNuke.Entities.Users.UserController.GetCurrentUserInfo().DisplayName.ToString();
  var userEmail = DotNetNuke.Entities.Users.UserController.GetCurrentUserInfo().Email.ToString();

  var ConnectionString = DotNetNuke.Common.Utilities.Config.GetConnectionString();

  var database = new SqlConnection(ConnectionString);
  var selectQueryString = "SELECT * FROM Questions ORDER BY Question_ID";

  SqlCommand command = new SqlCommand(selectQueryString, database);
  database.Open();
  var databaseName = database.Database;
  SqlDataReader reader = command.ExecuteReader();


  try
  {
    while (reader.Read())
    {
    if (reader[3] != DBNull.Value){
            <h3>@reader[1] <span style="color: red">*</span></h3>
          }else{<h3>@reader[1]</h3>}


      if (DBNull.Value != reader[5]){
        <button type="button" class="btn btn-info" data-toggle="modal" data-target="#@reader[0]">More Information</button><br></br>

        <div id="@reader[0]" class="modal fade" role="dialog">
          <div class="modal-dialog">

            <div class="modal-content">
              <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">@reader[4]</h4>
              </div>
              <div class="modal-body">
                <p>@reader[5]</p>
              </div>
              <div class="modal-footer">
                <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
              </div>
            </div>

          </div>
        </div>

      }

       if (DBNull.Value != reader[6])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[6]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[6]</label><br></br>
        }
        if (DBNull.Value != reader[7])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[7]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[7]</label><br></br>
        }
        if (DBNull.Value != reader[8])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[8]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[8]</label><br></br>
        }
        if (DBNull.Value != reader[9])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[9]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[9]</label><br></br>
        }
        if (DBNull.Value != reader[10])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[10]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[10]</label><br></br>
        }
        if (DBNull.Value != reader[11])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[11]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[11]</label><br></br>
        }
        if (DBNull.Value != reader[12])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[12]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[12]</label><br></br>
        }
        if (DBNull.Value != reader[13])
        {
          <label style="font-size:medium"><input style="height:20px;width:20px" type="@reader[2]" name="question_@reader[0]" value="@reader[13]" data-toggle="modal" data-target="#@reader[0]" @reader[3]> @reader[13]</label><br></br>
        }
    }
  }
    finally
    {
      // Always call Close when done reading.
      reader.Close();
      <h3>Would you like to send your readiness information to the local Shelters?</h3>
      <label style="font-size:medium"><input style="height:20px;width:20px" type="checkbox" name="contact" value="Yes" > Yes</label><br></br>
      <input type="submit" class="btn btn-success btn-lg" name="submit" value="Submit" />
      <input type="reset" class="btn btn-danger btn-lg" name="reset" value="Restart" />

    }
    if (IsPost)
    {

      try
      {

        int readiness_Value_Perfect = 0;
        int readiness_Value_Great = 0;
        int readiness_Value_Good = 0;
        int readiness_Value_Okay = 0;
        int readiness_Value_Neutral = 0;
        int readiness_Value_Flag = 0;
        int readiness_Value_Yellow_Flag = 0;
        int readiness_Value_Red_Flag = 0;
        int readiness_Value_Restrict = 0;

        var readinessQueryString = "SELECT * FROM readiness_Value";

        SqlCommand cmd = new SqlCommand(readinessQueryString, database);
        SqlDataReader readerReadiness = cmd.ExecuteReader();

        try
        {
          while(readerReadiness.Read())
          {
            readiness_Value_Perfect = readerReadiness.GetInt32(1);
            readiness_Value_Great = readerReadiness.GetInt32(2);
            readiness_Value_Good = readerReadiness.GetInt32(3);
            readiness_Value_Okay = readerReadiness.GetInt32(4);
            readiness_Value_Neutral = readerReadiness.GetInt32(5);
            readiness_Value_Flag = readerReadiness.GetInt32(6);
            readiness_Value_Yellow_Flag = readerReadiness.GetInt32(7);
            readiness_Value_Red_Flag = readerReadiness.GetInt32(8);
            readiness_Value_Restrict = readerReadiness.GetInt32(9);
          }
        }
        catch
        {

        }
        finally
        {
          readerReadiness.Close();
          <p>@readiness_Value_Perfect
          @readiness_Value_Great
          @readiness_Value_Good
          @readiness_Value_Okay
          @readiness_Value_Neutral
          @readiness_Value_Flag
          @readiness_Value_Yellow_Flag
          @readiness_Value_Red_Flag
          @readiness_Value_Restrict</p>
        }



        question_1 = Request.Form["question_1"];
          //not a questions for determining readiness

        question_2 = Request.Form["question_2"];
          //not a questions for determining readiness

        question_3 = Request.Form["question_3"];

        question_4 = Request.Form["question_4"];

        question_5 = Request.Form["question_5"];

        question_6 = Request.Form["question_6"];

        question_7 = Request.Form["question_7"];

        question_8 = Request.Form["question_8"];
        //not a questions for determining readiness

        question_9 = Request.Form["question_9"];

        question_10 = Request.Form["question_10"];

        question_11 = Request.Form["question_11"];

        question_12 = Request.Form["question_12"];
        //not a questions for determining readiness

        question_13 = Request.Form["question_13"];
        //not a questions for determining readiness

        question_14 = Request.Form["question_14"];

        question_15 = Request.Form["question_15"];
        //not a questions for determining readiness

        question_16 = Request.Form["question_16"];
        //not a questions for determining readiness

        question_17 = Request.Form["question_17"];
        //not a questions for determining readiness

        question_18 = Request.Form["question_18"];
        //not a questions for determining readiness

        question_19 = Request.Form["question_19"];
        //not a questions for determining readiness

        question_20 = Request.Form["question_20"];
        //not a questions for determining readiness

        question_21 = Request.Form["question_21"];

        question_22 = Request.Form["question_22"];

        contact = Request.Form["contact"];

          if(question_3.Equals("Yes"))
          {
            readiness += readiness_Value_Good;
          }

          if(question_4.Equals("No"))
          {
            readiness += readiness_Value_Good;
          }

          if(question_5.Equals("No"))
          {
            readiness += readiness_Value_Good;
          }
          if(question_5.Equals("Yes"))
          {
            readiness += readiness_Value_Flag;
          }

          if(question_6.Equals("No"))
          {
            readiness += readiness_Value_Good;
          }
          if(question_6.Equals("Yes"))
          {
            readiness += readiness_Value_Red_Flag;
          }

          if(question_7.Equals("Yes, full time"))
          {
            readiness += readiness_Value_Great;
          }
          if(question_7.Equals("Yes, part time"))
          {
            readiness += readiness_Value_Good;
          }
          if(question_7.Equals("Yes, seasonal or temporary"))
          {
            readiness += readiness_Value_Good;
          }
          if(question_7.Equals("Maybe"))
          {
            readiness += readiness_Value_Okay;
          }

          if(question_9.Equals("Yes"))
          {
            readiness += readiness_Value_Good;
          }
          if(question_9.Equals("No"))
          {
            readiness += readiness_Value_Flag;
          }

          if(question_10.Equals("$1250/year") || question_10.Equals("$1000/year") || question_10.Equals("$750/year"))
          {
            readiness += readiness_Value_Good;
          }
          if(question_10.Equals("$250/year") || question_10.Equals("$500/year"))
          {
            readiness += readiness_Value_Okay;
          }

          if(question_11.Equals("$1250/year") || question_11.Equals("$1000/year") || question_11.Equals("$1750+/year") || question_11.Equals("$1500/year"))
          {
            readiness += readiness_Value_Good;
          }
          if(question_11.Equals("$250/year") || question_11.Equals("$500/year") || question_11.Equals("$750/year"))
          {
            readiness += readiness_Value_Flag;
          }

          if(question_14.Equals("Apartment (2+ bedrooms)") || question_14.Equals("Apartment (studio/ single room)") || question_14.Equals("Condo") || question_14.Equals("Single family home"))
          {
            readiness += readiness_Value_Good;
          }
          if(question_14.Equals("Dorm/Resident hall"))
          {
            readiness += readiness_Value_Restrict;
          }

          if(question_21.Equals("Yes"))
          {
            readiness += readiness_Value_Flag;
          }
          if(question_21.Equals("No"))
          {
            readiness += readiness_Value_Good;
          }

          if(question_22.Equals("Yes"))
          {
            readiness += readiness_Value_Flag;
          }
          if(question_22.Equals("No"))
          {
            readiness += readiness_Value_Good;
          }

        SqlDataReader reader2;
        var insertQueryString = "INSERT INTO Responses (User_ID,Readiness) VALUES (@1,@2)";
        SqlCommand comm = new SqlCommand();
        comm.Connection = database;
        comm.CommandType = CommandType.Text;
        comm.CommandText = insertQueryString;
        comm.Parameters.AddWithValue("@1", DotNetNuke.Entities.Users.UserController.GetCurrentUserInfo().UserID.ToString());
        comm.Parameters.AddWithValue("@2", readiness);

        reader2 = comm.ExecuteReader();

        reader2.Close();

        if(readiness >= 13){
          readiness_level = "They are PetReady!";
        }
        if(readiness < 13){
          readiness_level = "Sadly they are not PetReady.";
        }

        SqlCommand Sheltercmd = new SqlCommand();

        SqlDataReader Shelterreader;

        Sheltercmd.CommandText = "Select partnered_Shelter_Email FROM partnered_Shelter";

        Sheltercmd.CommandType = CommandType.Text;

        Sheltercmd.Connection = database;

        Shelterreader = Sheltercmd.ExecuteReader();

        string stringTo = "";

        subject = "PetReady Questionnaire Report for " + displayName;
        body = "PetReady Questionnaire Report for " + displayName + "\n" +
        "\nReply To: " + userEmail + "\n" +
        "\nReadiness Level: " + readiness_level + "\n" +
        "\nGender: " + question_1 + "\n" +
        "\nWhich of the following fit your life situation: " + question_2 + "\n" +
        "\nDo you or anyone that lives with you have allergies to dogs: " + question_3 + "\n" +
        "\nDo you or anyone that lives with you have allergies to cats: " + question_4 + "\n" +
        "\nAre you planning on moving in the next 12 months: " + question_5 + "\n" +
        "\nAre you planning on leaving the country in the next 24 months for an extended period of time: " + question_6 + "\n" +
        "\nAre you employed: " + question_7 + "\n" +
        "\nIf employed, what is your typical shift type: " + question_8 + "\n" +
        "\nDo you have a budget in mind for your new pet: " + question_9 + "\n" +
        "\nWhat is your yearly pet budget: " + question_10 + "\n" +
        "\nWhat is your emergency budget: " + question_11 + "\n" +
        "\nWhat lifestyle fits you best: " + question_12 + "\n" +
        "\nHow much free time do you have in a given day: " + question_13 + "\n" +
        "\nWhat type of home do you live in: " + question_14 + "\n" +
        "\nIs there a pet deposit where you live: " + question_15 + "\n" +
        "\nIs there a monthly pet fee where you live: " + question_16 + "\n" +
        "\nAre there any restrictions on breed, size, weight, or type where you live: " + question_17 + "\n" +
        "\nDo you have a yard or access to a dog park: " + question_18 + "\n" +
        "\nHave you ever owned a pet before: " + question_19 + "\n" +
        "\nHave you kept your current/previous pets up to date with vaccinations: " + question_20 + "\n" +
        "\nHave you ever surrendered a pet before: " + question_21 + "\n" +
        "\nDo you plan to have cosmetically(voluntary) altering surgery performed on your new pet(s)? " + question_22;

        try
        {
          while(Shelterreader.Read())
          {
          stringTo += Shelterreader[0] + " ,";
          }
          stringTo = stringTo.TrimEnd(stringTo[stringTo.Length -1]);
        }
        catch
        {

        }
        finally
        {
          Shelterreader.Close();
          database.Close();
          if(contact.Equals("Yes"))
          {
            DotNetNuke.Services.Mail.Mail.SendEmail("petready.webmaster@gmail.com", stringTo, subject, body);
          }

        }

      }
      catch
      {

      }

      finally
      {
         Response.Redirect("http://petready.org.nau.edu/Find-A-Pet");
      }
    }
}

</form>
</body>

<script>
$('form').on('reset', function() {
  console.log("reset");
  return confirm("Are you sure you want to reset all questions");
});
</script>
